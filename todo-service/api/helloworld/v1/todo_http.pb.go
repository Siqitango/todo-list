// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: helloworld/v1/todo.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTodoServiceCreateTodo = "/helloworld.v1.TodoService/CreateTodo"
const OperationTodoServiceDeleteTodo = "/helloworld.v1.TodoService/DeleteTodo"
const OperationTodoServiceGetTodo = "/helloworld.v1.TodoService/GetTodo"
const OperationTodoServiceListTodos = "/helloworld.v1.TodoService/ListTodos"
const OperationTodoServiceUpdateTodo = "/helloworld.v1.TodoService/UpdateTodo"

type TodoServiceHTTPServer interface {
	// CreateTodo Create a new todo
	CreateTodo(context.Context, *CreateTodoRequest) (*Todo, error)
	// DeleteTodo Delete a todo
	DeleteTodo(context.Context, *DeleteTodoRequest) (*emptypb.Empty, error)
	// GetTodo Get a todo by id
	GetTodo(context.Context, *GetTodoRequest) (*Todo, error)
	// ListTodos List todos
	ListTodos(context.Context, *ListTodosRequest) (*ListTodosResponse, error)
	// UpdateTodo Update a todo
	UpdateTodo(context.Context, *UpdateTodoRequest) (*Todo, error)
}

func RegisterTodoServiceHTTPServer(s *http.Server, srv TodoServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/api/todo", _TodoService_CreateTodo0_HTTP_Handler(srv))
	r.GET("/api/todo/{id}", _TodoService_GetTodo0_HTTP_Handler(srv))
	r.PUT("/api/todo/{id}", _TodoService_UpdateTodo0_HTTP_Handler(srv))
	r.DELETE("/api/todo/{id}", _TodoService_DeleteTodo0_HTTP_Handler(srv))
	r.GET("/api/todos", _TodoService_ListTodos0_HTTP_Handler(srv))
}

func _TodoService_CreateTodo0_HTTP_Handler(srv TodoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateTodoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTodoServiceCreateTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateTodo(ctx, req.(*CreateTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Todo)
		return ctx.Result(200, reply)
	}
}

func _TodoService_GetTodo0_HTTP_Handler(srv TodoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTodoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTodoServiceGetTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTodo(ctx, req.(*GetTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Todo)
		return ctx.Result(200, reply)
	}
}

func _TodoService_UpdateTodo0_HTTP_Handler(srv TodoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateTodoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTodoServiceUpdateTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateTodo(ctx, req.(*UpdateTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*Todo)
		return ctx.Result(200, reply)
	}
}

func _TodoService_DeleteTodo0_HTTP_Handler(srv TodoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteTodoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTodoServiceDeleteTodo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteTodo(ctx, req.(*DeleteTodoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*emptypb.Empty)
		return ctx.Result(200, reply)
	}
}

func _TodoService_ListTodos0_HTTP_Handler(srv TodoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListTodosRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTodoServiceListTodos)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListTodos(ctx, req.(*ListTodosRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListTodosResponse)
		return ctx.Result(200, reply)
	}
}

type TodoServiceHTTPClient interface {
	CreateTodo(ctx context.Context, req *CreateTodoRequest, opts ...http.CallOption) (rsp *Todo, err error)
	DeleteTodo(ctx context.Context, req *DeleteTodoRequest, opts ...http.CallOption) (rsp *emptypb.Empty, err error)
	GetTodo(ctx context.Context, req *GetTodoRequest, opts ...http.CallOption) (rsp *Todo, err error)
	ListTodos(ctx context.Context, req *ListTodosRequest, opts ...http.CallOption) (rsp *ListTodosResponse, err error)
	UpdateTodo(ctx context.Context, req *UpdateTodoRequest, opts ...http.CallOption) (rsp *Todo, err error)
}

type TodoServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewTodoServiceHTTPClient(client *http.Client) TodoServiceHTTPClient {
	return &TodoServiceHTTPClientImpl{client}
}

func (c *TodoServiceHTTPClientImpl) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...http.CallOption) (*Todo, error) {
	var out Todo
	pattern := "/api/todo"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTodoServiceCreateTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TodoServiceHTTPClientImpl) DeleteTodo(ctx context.Context, in *DeleteTodoRequest, opts ...http.CallOption) (*emptypb.Empty, error) {
	var out emptypb.Empty
	pattern := "/api/todo/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTodoServiceDeleteTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TodoServiceHTTPClientImpl) GetTodo(ctx context.Context, in *GetTodoRequest, opts ...http.CallOption) (*Todo, error) {
	var out Todo
	pattern := "/api/todo/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTodoServiceGetTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TodoServiceHTTPClientImpl) ListTodos(ctx context.Context, in *ListTodosRequest, opts ...http.CallOption) (*ListTodosResponse, error) {
	var out ListTodosResponse
	pattern := "/api/todos"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTodoServiceListTodos))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *TodoServiceHTTPClientImpl) UpdateTodo(ctx context.Context, in *UpdateTodoRequest, opts ...http.CallOption) (*Todo, error) {
	var out Todo
	pattern := "/api/todo/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationTodoServiceUpdateTodo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
